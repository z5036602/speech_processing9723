% ldTIDIGITSasr
% 15/01/08

% Load TIDIGITS speech data for speech recognition

frame = 160; % 20ms after downsampling
order = 30;
[b1,a1] = cheby1(order,0.1,0.47);
basedir = 'C:\Users\Vidhya-User\Desktop\UNSW Teaching\ELEC9723 - 2011\Course Material\Labs\Labs\';

assignpath(basedir)  % You only need to run this line once for every time you open MATLAB

database = 'TIDIGITS';
uttlimit = 100;
spkrlimit = 28;
framelimit = 1e9;

% for saving features
%fidn = fopen(['C:\work\2005 S2\wbe\' tt 'data'],'wb');
files = 1;
frames = 1;
word = 1;
spkridx = ones(1,spkrlimit);
D1 = dir([basedir database]);
[D2{1:size(D1,1)}] = deal(D1.name);
disp('Loading...');
for spkrDirNum = 3:12, %size(D3,1), % just first 10 speakers
    disp(['   ' D2{spkrDirNum}])
    D3 = dir([basedir database '\' D2{spkrDirNum}]);
    [D4{1:size(D3,1)}] = deal(D3.name);
    utt = 0;
    for fileNum = 3:size(D3,1),
        %disp(['      ' D6{fileNum}])
        if ~isempty(findstr(D4{fileNum},'.raw'))
            utt = utt + 1;
            fidt = fopen([basedir database '\' D2{spkrDirNum} '\' D4{fileNum}],'rb');
            y = fread(fidt,320000,'short');
            fclose(fidt);
            y = y(513:end); % remove header (since wavread doesn't work)
            yn1 = filter(b1,a1,y);
            yn2 = yn1(1:2:end);
            % Remove low-energy portions
            ind = find(yn2>10);
            yn2 = yn2(ind(1):ind(end));
%             ns = sqrt(mean(yn2.^2)/10)*randn(size(yn2));
%             yn2 = yn2 + sqrt(mean(yn2.^2)/10)*randn(size(yn2));
%             yn2 = yn2 + sqrt(mean(yn2.^2))*randn(size(yn2));

            % MFCC / RASTA
%             mfc = melfcc(yn2, 8000, 'lifterexp', -22, 'nbands', 17, ...
%                 'dcttype', 3, 'maxfreq',4000, 'fbtype', 'htkmel', 'sumpower', 0);
            
%             mfc = calcMFCC(vad(yn2,8000),8000);

            mfc = calcMFCC(yn2,8000);
            
            %ras = rastaplp(yn2, 8000, 1, 12)';
            asrvectors{word}{utt} = mfc';
            data{word}{utt} = yn2;
            
            % Cepstral mean normalisation
            [r,c] = size(mfc);
%             asrvectors{word}{utt} = asrvectors{word}{utt} - ones(c,1)*mean(asrvectors{word}{utt});
            
            % Mean and variance normalisation
%             asrvectors{word}{utt} = (asrvectors{word}{utt} - ...
%             ones(c,1)*mean(asrvectors{word}{utt}))./(ones(c,1)*std(asrvectors{word}{utt}));
            
            % Cumulative distribution mapping
%             clear wmfc;
%             for dim = 1:r,
%                [sc,idx] = sort(mfc(dim,:));
%                wmfc(dim,idx) = norminv((0.5:c-0.5)/c,0,1);
%             end
%             asrvectors{word}{utt} = wmfc';
            
        end
        files = files + 1;
    end
    word = word + 1;
end
%total_files = files
% fclose(fidn); % for saving
